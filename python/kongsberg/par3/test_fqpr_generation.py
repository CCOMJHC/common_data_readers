import numpy as np
import xarray as xr
import matplotlib.pyplot as plt
from matplotlib.gridspec import GridSpec

import par3
import fqpr_generation
import xarray_conversion
from dask_helpers import dask_find_or_start_client
from fqpr_visualizations import FqprVisualizations


def test_get_orientation_vectors(dset='real'):
    """
    Automated test of fqpr_generation get_orientation_vectors

    Will run using the 'real' dataset included in this file as well as a small synthetic test dataset with meaningless
    numbers that I've just come up with.

    Parameters
    ----------
    dset: str, specify which dataset you want to use

    """
    if dset == 'real':
        synth = load_real_dataset()
        expected_tx_per_sec = np.array([[0.6136320364242938, -0.7895442676236722, 0.008693292608278485],
                                        [0.6236867407546264, -0.7816427429527407, 0.00703361899645053]])
        expected_rx_per_sector_first_beam = [np.array([0.7834075280437213, 0.619554842851633, -0.049238620040718835]),
                                             np.array([0.786992256741206, 0.6166668992776912, -0.01910819626813077]),
                                             np.array([0.7869506279491664, 0.6167078099389183, -0.019498367386937266])]
    elif dset == 'synthetic':
        synth = load_synthetic_dataset()
        expected_tx_per_sec = np.array([[0.9996954135095479, 0.017449748351250485, -0.01745240643728351],
                                        [0.9980973490458729, 0.04357787137382909, -0.043619387365336]])
        expected_rx_per_sector_first_beam = [np.array([-0.02548298031086459, 0.9993327046762305, 0.026167978121471917]),
                                             np.array([-0.02548298031086459, 0.9993327046762305, 0.026167978121471917])]
    else:
        raise NotImplementedError('mode not recognized')

    fq = fqpr_generation.Fqpr(synth)
    fq.get_orientation_vectors()

    # arrays of computed vectors
    txvecdata = [fq.tx_vecs[t].values for t in fq.tx_vecs]
    rxvecdata = [fq.rx_vecs[t].values[0][0] for t in fq.rx_vecs]

    # check for the expected tx orientation vectors
    expected_tx_vector = [expected_tx_per_sec] * len(synth.raw_rangeangle)
    assert np.array_equal(expected_tx_vector, txvecdata)

    # check for the expected rx orientation vectors
    assert np.array_equal(expected_rx_per_sector_first_beam, rxvecdata)

    synth.client.close()
    print('Passed: get_orientation_vectors')


def test_build_beam_pointing_vector(dset='real'):
    """
    Automated test of fqpr_generation build_beam_pointing_vector

    Will run using the 'real' dataset included in this file as well as a small synthetic test dataset with meaningless
    numbers that I've just come up with.

    Parameters
    ----------
    dset: str, specify which dataset you want to use

    """
    if dset == 'real':
        synth = load_real_dataset()
        expected_ba = [4.697717585401731, 4.707901017750317, 1.5583270434989467]
        expected_twtt = [0.3374375104904175, 0.1575709879398346, 0.1598992943763733]
        expected_bda = [1.2092375290847268, 0.6909205872188509, -0.6947044368563297]
    elif dset == 'synthetic':
        synth = load_synthetic_dataset()
        expected_ba_per_sec = np.array([4.723982786280474, 4.732034989934763, 4.745751438636901, 4.782086203619032,
                                        5.695124118806011, 1.4934677637577691, 1.5353961315220157,
                                        1.5501352687283063, 1.5585199741745954])
        expected_ba = np.array([expected_ba_per_sec, expected_ba_per_sec])
        expected_twtt_per_sec = np.array([0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5])
        expected_twtt = np.array([expected_twtt_per_sec, expected_twtt_per_sec])
        expected_bda_per_sec = np.array([1.4141170797158946, 1.064996415601551, 0.7160679504695188, 0.3674527905930134,
                                         0.03146400189587539, -0.3326455522810603, -0.6811872952701721,
                                         -1.0301022329825362,
                                         -1.3792182968753164])
        expected_bda = np.array([expected_bda_per_sec, expected_bda_per_sec])
    else:
        raise NotImplementedError('mode not recognized')

    fq = fqpr_generation.Fqpr(synth)
    fq.get_orientation_vectors()
    fq.build_beam_pointing_vector()

    ba_data = [fq.fqpr[t].beam_azimuth.isel(time=0).values[0] for t in fq.fqpr]
    bda_data = [fq.fqpr[t].beam_pointing_angle.isel(time=0).values[0] for t in fq.fqpr]
    tt_data = [fq.fqpr[t].two_way_travel_time.isel(time=0).values[0] for t in fq.fqpr]

    # beam azimuth check
    assert np.array_equal(ba_data, expected_ba)

    # two way travel time check
    assert np.array_equal(tt_data, expected_twtt)

    # beam depression angle check
    assert np.array_equal(bda_data, expected_bda)

    synth.client.close()
    print('Passed: build_beam_pointing_vector')


def test_sv_correct(dset='real'):
    if dset == 'real':
        synth = load_real_dataset()
        expected_x = [-3.417, -0.333, 0.942]
        expected_y = [-232.859, -74.101, 75.539]
        expected_z = [91.053, 90.238, 91.284]
    else:
        raise NotImplementedError('mode not recognized')

    fq = fqpr_generation.Fqpr(synth)
    fq.get_orientation_vectors()
    fq.build_beam_pointing_vector()
    fq.sv_correct()

    x_data = [fq.fqpr[t].alongtrack_offset.values[0][0] for t in fq.fqpr]
    y_data = [fq.fqpr[t].acrosstrack_offset.values[0][0] for t in fq.fqpr]
    z_data = [fq.fqpr[t].depth_offset.values[0][0] for t in fq.fqpr]

    # beam azimuth check
    assert np.array_equal(x_data, expected_x)

    # two way travel time check
    assert np.array_equal(y_data, expected_y)

    # beam depression angle check
    assert np.array_equal(z_data, expected_z)

    synth.client.close()
    print('Passed: sv_correct')


def load_synthetic_dataset():
    synth = SyntheticFqpr(synth_time=0, synth_heave=0, synth_roll=0, synth_pitch=0, synth_yaw=0, synth_tx_mountroll=0,
                          synth_tx_mountpitch=0, synth_tx_mountyaw=0, synth_rx_mountroll=0, synth_rx_mountpitch=0,
                          synth_rx_mountyaw=0, secs=('999_0_290000', '999_0_300000'))
    kongs_dat = xarray_conversion.BatchRead('')
    kongs_dat.xyzrph = synth.xyzrph
    kongs_dat.raw_rangeangle = synth.raw_rangeangle
    kongs_dat.raw_att = synth.raw_att
    return kongs_dat


def load_real_dataset():
    synth = RealFqpr()
    kongs_dat = xarray_conversion.BatchRead('')
    kongs_dat.xyzrph = synth.xyzrph
    kongs_dat.raw_rangeangle = synth.raw_rangeangle
    kongs_dat.raw_att = synth.raw_att
    return kongs_dat


class SyntheticFqpr:
    def __init__(self, synth_time=0, synth_heave=0, synth_roll=0, synth_pitch=0, synth_yaw=90, synth_tx_mountroll=0,
                 synth_tx_mountpitch=0, synth_tx_mountyaw=0, synth_rx_mountroll=0, synth_rx_mountpitch=0,
                 synth_rx_mountyaw=0, synth_tx_x=0, synth_tx_y=0, synth_tx_z=0, synth_rx_x=0, synth_rx_y=0,
                 synth_rx_z=0, secs=('999_0_290000', '999_0_300000')):
        self.client = dask_find_or_start_client()
        self.synth_time = synth_time
        self.synth_heave = synth_heave
        self.synth_roll = synth_roll
        self.synth_pitch = synth_pitch
        self.synth_yaw = synth_yaw
        self.synth_tx_mountroll = synth_tx_mountroll
        self.synth_tx_mountpitch = synth_tx_mountpitch
        self.synth_tx_mountyaw = synth_tx_mountyaw
        self.synth_rx_mountroll = synth_rx_mountroll
        self.synth_rx_mountpitch = synth_rx_mountpitch
        self.synth_rx_mountyaw = synth_rx_mountyaw

        self.secs = secs

        self.xyzrph = {'tx_r': {str(synth_time): synth_tx_mountroll}, 'tx_p': {str(synth_time): synth_tx_mountpitch},
                       'tx_h': {str(synth_time): synth_tx_mountyaw}, 'rx_r': {str(synth_time): synth_rx_mountroll},
                       'rx_p': {str(synth_time): synth_rx_mountpitch}, 'rx_h': {str(synth_time): synth_rx_mountyaw},
                       'tx_x': {str(synth_time): synth_tx_x}, 'tx_y': {str(synth_time): synth_tx_y},
                       'tx_z': {str(synth_time): synth_tx_z}, 'rx_x': {str(synth_time): synth_rx_x},
                       'rx_y': {str(synth_time): synth_rx_y}, 'rx_z': {str(synth_time): synth_rx_z}}

        self.raw_rangeangle = self.construct_rangeangle()
        self.raw_att = self.construct_rawattitude()

    def construct_rangeangle(self):
        tme_vals = [self.synth_time + 1, self.synth_time + 3]
        sec_vals = self.secs
        bm_vals = [i for i in range(9)]

        tme_coord = xr.DataArray(np.array(tme_vals), dims=['time'], coords=np.array([tme_vals]))
        beam_coord = xr.DataArray(np.array(bm_vals), dims=['beam'],
                                  coords=np.array([bm_vals]))

        dataset = []
        for sec in sec_vals:
            delay_data = [0] * len(tme_vals)
            delay = xr.DataArray(np.array(delay_data), dims=['time'], coords={'time': tme_coord})

            ntx_data = [1] * len(tme_vals)
            ntx = xr.DataArray(np.array(ntx_data), dims=['time'], coords={'time': tme_coord})

            tiltangle_data = [0.5] * len(tme_vals)
            tiltangle = xr.DataArray(np.array(tiltangle_data), dims=['time'], coords={'time': tme_coord})

            twoway_travel_time_data = [[0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5]] * len(tme_vals)
            twoway_travel_time = xr.DataArray(np.array(twoway_travel_time_data), dims=['time', 'beam'],
                                              coords={'time': tme_coord, 'beam': bm_vals})

            beam_pointing_angle_data = [[80, 60, 40, 20, 0, -20, -40, -60, -80]] * len(tme_vals)
            beam_pointing_angle = xr.DataArray(np.array(beam_pointing_angle_data), dims=['time', 'beam'],
                                               coords={'time': tme_coord, 'beam': bm_vals})

            dataset.append(xr.Dataset({'delay': (['time'], delay), 'ntx': (['time'], ntx),
                                       'tiltangle': (['time'], tiltangle),
                                       'traveltime': (['time', 'beam'], twoway_travel_time),
                                       'beampointingangle': (['time', 'beam'], beam_pointing_angle)},
                                      coords={'time': tme_coord, 'beam': beam_coord},
                                      attrs={'system_serial_number': ['999'], 'sector_identifier': sec}).chunk())
        return dataset

    def construct_rawattitude(self):
        tme_vals = [self.synth_time, self.synth_time + 2, self.synth_time + 4]
        tme_coord = xr.DataArray(np.array(tme_vals), dims=['time'], coords=np.array([tme_vals]))

        heading = xr.DataArray(np.array([self.synth_yaw, self.synth_yaw + 2, self.synth_yaw + 3]), dims=['time'],
                               coords={'time': tme_coord})
        heave = xr.DataArray(np.array([self.synth_heave, self.synth_heave + 2, self.synth_heave + 3]), dims=['time'],
                             coords={'time': tme_coord})
        pitch = xr.DataArray(np.array([self.synth_pitch, self.synth_pitch + 2, self.synth_pitch + 3]), dims=['time'],
                             coords={'time': tme_coord})
        roll = xr.DataArray(np.array([self.synth_roll, self.synth_roll + 2, self.synth_roll + 3]), dims=['time'],
                            coords={'time': tme_coord})

        return xr.Dataset({'heading': (['time'], heading), 'heave': (['time'], heave), 'pitch': (['time'], pitch),
                           'roll': (['time'], roll)}, coords={'time': tme_coord}).chunk()


class RealFqpr:
    def __init__(self,
                 synth_ra_time=(1495563084.457, 1495563084.948),
                 synth_att_time=(1495563084.440, 1495563084.461, 1495563084.941, 1495563084.951),
                 synth_nav_time=(1495563084.455, 1495563084.461, 1495563084.945, 1495563084.951),
                 synth_beampointingangle=(((72.05999755859375, 71.94999694824219, 71.83999633789062, 71.72999572753906,
                                            71.61000061035156, 71.5, 71.37999725341797, 71.15999603271484,
                                            71.04000091552734, 70.91999816894531, 70.79999542236328, 70.68000030517578,
                                            70.54999542236328, 70.1500015258789, 70.0199966430664, 69.88999938964844,
                                            69.7699966430664, 69.62999725341797, 69.5, 69.3699951171875,
                                            69.22999572753906, 69.0999984741211, 68.95999908447266, 68.81999969482422,
                                            68.68000030517578, 68.54000091552734, 68.38999938964844, 68.25,
                                            68.0999984741211, 67.94999694824219, 67.79999542236328, 67.54000091552734,
                                            67.38999938964844, 67.22999572753906, 67.08000183105469, 66.90999603271484,
                                            66.75, 66.58999633789062, 66.31999969482422, 66.15999603271484,
                                            65.98999786376953, 65.80999755859375, 65.63999938964844, 65.45999908447266,
                                            65.18000030517578, 65.0, 64.81999969482422, 64.63999938964844,
                                            64.04000091552734, 63.849998474121094, 63.65999984741211,
                                            63.459999084472656, 63.27000045776367, 63.06999969482422, 62.8599967956543,
                                            62.65999984741211, 62.44999694824219, 62.23999786376953, 62.029998779296875,
                                            61.80999755859375, 61.599998474121094, 61.369998931884766,
                                            61.14999771118164, 60.91999816894531, 60.689998626708984,
                                            60.459999084472656, 60.21999740600586, 59.97999954223633, 59.73999786376953,
                                            59.48999786376953, 59.25, 58.98999786376953, 58.73999786376953,
                                            58.47999954223633, 58.209999084472656, 57.939998626708984,
                                            57.56999969482422, 57.29999923706055, 57.02000045776367, 56.73999786376953,
                                            56.44999694824219, 56.15999984741211, 55.86000061035156, 55.44999694824219,
                                            55.14999771118164, 54.84000015258789, 54.529998779296875,
                                            54.209999084472656, 53.88999938964844, 53.55999755859375,
                                            53.119998931884766, 52.779998779296875, 52.439998626708984,
                                            52.099998474121094, 51.73999786376953, 51.38999938964844, 51.02000045776367,
                                            50.55999755859375, 50.18000030517578, 49.79999923706055, 49.41999816894531,
                                            49.029998779296875, 48.62999725341797, 48.22999954223633,
                                            47.709999084472656, 47.29999923706055, 46.87999725341797, 46.45000076293945,
                                            46.02000045776367, 45.56999969482422, 45.12999725341797, 44.66999816894531,
                                            44.099998474121094, 43.63999938964844, 43.15999984741211, 42.68000030517578,
                                            42.189998626708984, 41.689998626708984, 41.189998626708984, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0),
                                           (74.58999633789062, 74.48999786376953, 74.37999725341797, 74.29999542236328,
                                            74.18999481201172, 74.08000183105469, 73.97000122070312, 73.86000061035156,
                                            73.75, 73.68000030517578, 73.55999755859375, 73.44999694824219,
                                            73.33000183105469, 73.20999908447266, 73.0999984741211, 72.97999572753906,
                                            72.8499984741211, 72.72999572753906, 72.61000061035156, 72.47999572753906,
                                            72.36000061035156, 72.25, 72.1199951171875, 71.98999786376953,
                                            71.86000061035156, 71.72000122070312, 71.58999633789062, 71.45999908447266,
                                            71.31999969482422, 71.18000030517578, 71.04000091552734, 70.9000015258789,
                                            70.7699966430664, 70.62999725341797, 70.47999572753906, 70.33000183105469,
                                            70.18000030517578, 70.02999877929688, 69.8699951171875, 69.72000122070312,
                                            69.55999755859375, 69.4000015258789, 69.23999786376953, 69.06999969482422,
                                            68.90999603271484, 68.75, 68.58000183105469, 68.40999603271484,
                                            68.23999786376953, 68.05999755859375, 67.87999725341797, 67.69999694824219,
                                            67.5199966430664, 67.33000183105469, 67.1500015258789, 66.95999908447266,
                                            66.7699966430664, 66.56999969482422, 66.37999725341797, 66.18000030517578,
                                            65.97999572753906, 65.7699966430664, 65.56999969482422, 65.36000061035156,
                                            65.13999938964844, 64.93000030517578, 64.70999908447266, 64.48999786376953,
                                            64.2699966430664, 64.04000091552734, 63.78999710083008, 63.55999755859375,
                                            63.31999969482422, 63.07999801635742, 62.84000015258789, 62.599998474121094,
                                            62.349998474121094, 62.099998474121094, 61.84000015258789, 61.57999801635742,
                                            61.31999969482422, 61.04999923706055, 60.779998779296875, 60.5,
                                            60.21999740600586, 59.939998626708984, 59.64999771118164, 59.3599967956543,
                                            59.06999969482422, 58.77000045776367, 58.459999084472656, 58.14999771118164,
                                            57.84000015258789, 57.52000045776367, 57.19999694824219, 56.87999725341797,
                                            56.54999923706055, 56.18000030517578, 55.84000015258789, 55.5,
                                            55.14999771118164, 54.78999710083008, 54.43000030517578, 54.06999969482422,
                                            53.69999694824219, 53.31999969482422, 52.939998626708984, 52.54999923706055,
                                            52.15999984741211, 51.7599983215332, 51.349998474121094, 50.939998626708984,
                                            50.5, 50.07999801635742, 49.64999771118164, 49.209999084472656,
                                            48.77000045776367, 48.30999755859375, 47.86000061035156, 47.38999938964844,
                                            46.88999938964844, 46.40999984741211, 45.93000030517578, 45.43000030517578,
                                            44.93000030517578, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0)),
                                          ((40.68000030517578, 40.15999984741211, 39.529998779296875, 38.98999786376953,
                                            38.45000076293945, 37.89999771118164, 37.34000015258789, 36.779998779296875,
                                            36.20000076293945, 35.619998931884766, 35.029998779296875,
                                            34.31999969482422, 33.709999084472656, 33.09000015258789, 32.46999740600586,
                                            31.829999923706055, 31.189998626708984, 30.53999900817871, 29.8799991607666,
                                            29.219999313354492, 28.53999900817871, 27.85999870300293,
                                            27.049999237060547, 26.349998474121094, 25.639999389648438,
                                            24.93000030517578, 24.19999885559082, 23.469999313354492,
                                            22.729999542236328, 21.979999542236328, 21.219999313354492,
                                            20.459999084472656, 19.689998626708984, 18.90999984741211,
                                            18.119998931884766, 17.329999923706055, 16.529998779296875,
                                            15.729999542236328, 14.809999465942383, 13.989999771118164,
                                            13.170000076293945, 12.34000015258789, 11.50999927520752,
                                            10.670000076293945, 9.829999923706055, 8.989999771118164, 8.139999389648438,
                                            7.289999961853027, 6.429999828338623, 5.579999923706055, 4.71999979019165,
                                            3.859999895095825, 2.990000009536743, 2.129999876022339, 1.2699999809265137,
                                            0.3999999761581421, -0.4599999785423279, -1.3299999237060547,
                                            -2.190000057220459, -3.049999952316284, -3.9099998474121094,
                                            -4.769999980926514, -5.619999885559082, -6.46999979019165,
                                            -7.319999694824219, -8.170000076293945, -9.010000228881836,
                                            -9.84000015258789, -10.679999351501465, -11.5, -12.329999923706055,
                                            -13.029999732971191, -13.84000015258789, -14.649999618530273,
                                            -15.449999809265137, -16.239999771118164, -17.029998779296875,
                                            -17.809999465942383, -18.579999923706055, -19.34000015258789,
                                            -20.100000381469727, -20.850000381469727, -21.59000015258789,
                                            -22.31999969482422, -23.049999237060547, -23.76999855041504,
                                            -24.35999870300293, -25.06999969482422, -25.760000228881836,
                                            -26.439998626708984, -27.119998931884766, -27.78999900817871,
                                            -28.44999885559082, -29.099998474121094, -29.739999771118164,
                                            -30.369998931884766, -31.0, -31.510000228881836, -32.11000061035156,
                                            -32.709999084472656, -33.30999755859375, -33.88999938964844,
                                            -34.46999740600586, -35.029998779296875, -35.59000015258789,
                                            -36.13999938964844, -36.689998626708984, -37.119998931884766,
                                            -37.64999771118164, -38.16999816894531, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0),
                                           (44.43000030517578, 43.90999984741211, 43.38999938964844, 42.84000015258789,
                                            42.29999923706055, 41.7599983215332, 41.20000076293945, 40.63999938964844,
                                            40.06999969482422, 39.48999786376953, 38.90999984741211, 38.30999755859375,
                                            37.709999084472656, 37.06999969482422, 36.45000076293945, 35.81999969482422,
                                            35.189998626708984, 34.540000915527344, 33.88999938964844,
                                            33.22999954223633, 32.55999755859375, 31.8799991607666, 31.19999885559082,
                                            30.5, 29.76999855041504, 29.059999465942383, 28.34000015258789,
                                            27.619998931884766, 26.8799991607666, 26.139999389648438,
                                            25.389999389648438, 24.6299991607666, 23.869998931884766,
                                            23.100000381469727, 22.31999969482422, 21.53999900817871, 20.75,
                                            19.94999885559082, 19.149999618530273, 18.34000015258789,
                                            17.520000457763672, 16.69999885559082, 15.839999198913574,
                                            15.00999927520752, 14.170000076293945, 13.34000015258789, 12.5,
                                            11.649999618530273, 10.800000190734863, 9.949999809265137, 9.09999942779541,
                                            8.25, 7.389999866485596, 6.529999732971191, 5.670000076293945,
                                            4.819999694824219, 3.9599997997283936, 3.0999999046325684,
                                            2.240000009536743, 1.3899999856948853, 0.5299999713897705,
                                            -0.3199999928474426, -1.1699999570846558, -2.0199999809265137,
                                            -2.859999895095825, -3.6999998092651367, -4.539999961853027,
                                            -5.380000114440918, -6.170000076293945, -6.989999771118164,
                                            -7.809999942779541, -8.619999885559082, -9.429999351501465,
                                            -10.239999771118164, -11.029999732971191, -11.819999694824219,
                                            -12.609999656677246, -13.389999389648438, -14.15999984741211,
                                            -14.920000076293945, -15.679999351501465, -16.43000030517578,
                                            -17.170000076293945, -17.899999618530273, -18.6299991607666,
                                            -19.350000381469727, -20.029998779296875, -20.729999542236328,
                                            -21.420000076293945, -22.10999870300293, -22.779998779296875,
                                            -23.44999885559082, -24.10999870300293, -24.76999855041504,
                                            -25.40999984741211, -26.049999237060547, -26.670000076293945,
                                            -27.260000228881836, -27.869998931884766, -28.479999542236328,
                                            -29.06999969482422, -29.65999984741211, -30.229999542236328,
                                            -30.799999237060547, -31.369998931884766, -31.920000076293945,
                                            -32.46999740600586, -32.97999954223633, -33.5099983215332,
                                            -34.040000915527344, -34.54999923706055, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0)),
                                          ((-38.68000030517578, -39.18000030517578, -39.68000030517578,
                                            -40.16999816894531, -40.64999771118164, -41.12999725341797,
                                            -41.48999786376953, -41.95000076293945, -42.39999771118164,
                                            -42.849998474121094, -43.290000915527344, -43.72999954223633,
                                            -44.14999771118164, -44.56999969482422, -44.87999725341797,
                                            -45.28999710083008, -45.689998626708984, -46.09000015258789,
                                            -46.47999954223633, -46.86000061035156, -47.23999786376953,
                                            -47.619998931884766, -47.87999725341797, -48.25, -48.599998474121094,
                                            -48.959999084472656, -49.29999923706055, -49.64999771118164,
                                            -49.97999954223633, -50.20000076293945, -50.529998779296875,
                                            -50.849998474121094, -51.16999816894531, -51.47999954223633,
                                            -51.78999710083008, -52.099998474121094, -52.39999771118164,
                                            -52.57999801635742, -52.869998931884766, -53.15999984741211,
                                            -53.439998626708984, -53.71999740600586, -54.0, -54.27000045776367,
                                            -54.53999710083008, -54.69999694824219, -54.959999084472656,
                                            -55.21999740600586, -55.46999740600586, -55.71999740600586,
                                            -55.96999740600586, -56.209999084472656, -56.44999694824219,
                                            -56.689998626708984, -56.91999816894531, -57.14999771118164,
                                            -57.37999725341797, -57.599998474121094, -57.81999969482422,
                                            -58.03999710083008, -58.2599983215332, -58.46999740600586,
                                            -58.68000030517578, -58.88999938964844, -59.09000015258789,
                                            -59.29999923706055, -59.5, -59.689998626708984, -59.88999938964844,
                                            -60.07999801635742, -60.27000045776367, -60.459999084472656,
                                            -60.63999938964844, -60.81999969482422, -61.0099983215332,
                                            -61.18000030517578, -60.94999694824219, -61.119998931884766,
                                            -61.29999923706055, -61.46999740600586, -61.62999725341797,
                                            -61.79999923706055, -61.959999084472656, -62.12999725341797,
                                            -62.28999710083008, -62.439998626708984, -62.599998474121094,
                                            -62.65999984741211, -62.80999755859375, -62.959999084472656,
                                            -63.1099967956543, -63.2599983215332, -63.39999771118164,
                                            -63.54999923706055, -63.689998626708984, -63.82999801635742,
                                            -63.96999740600586, -64.01000213623047, -64.1500015258789,
                                            -64.27999877929688, -64.41999816894531, -64.54999542236328,
                                            -64.68000030517578, -64.80999755859375, -64.93999481201172,
                                            -65.05999755859375, -65.18999481201172, -65.30999755859375,
                                            -65.33000183105469, -65.45999908447266, -65.58000183105469,
                                            -65.69999694824219, -65.80999755859375, -65.93000030517578,
                                            -66.04000091552734, -66.15999603271484, -66.2699966430664,
                                            -66.37999725341797, -66.48999786376953, -66.5999984741211,
                                            -66.70999908447266, -66.81999969482422, -66.93000030517578,
                                            -67.02999877929688, -67.13999938964844, -67.23999786376953,
                                            -67.33999633789062, -67.43999481201172, -67.54000091552734,
                                            -67.63999938964844, -67.73999786376953, -67.83999633789062,
                                            -67.93000030517578, -68.02999877929688, -68.1199951171875,
                                            -68.22000122070312, -68.30999755859375, -68.4000015258789,
                                            -68.5, -68.58999633789062, -68.66999816894531, -68.76000213623047,
                                            -68.8499984741211, -68.93999481201172, -69.02999877929688,
                                            -68.83000183105469, -68.91999816894531, -69.0, -69.08000183105469,
                                            -69.16999816894531, -69.25, -69.33000183105469, -69.40999603271484,
                                            -69.48999786376953, -69.56999969482422, -69.6500015258789,
                                            -69.72000122070312, -69.79999542236328, -69.87999725341797,
                                            -69.94999694824219, -70.02999877929688, -70.0999984741211,
                                            -70.08000183105469, -70.1500015258789, -70.22000122070312,
                                            -70.29000091552734, -70.3699951171875, -70.43999481201172,
                                            -70.51000213623047, -70.58000183105469, -70.63999938964844, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0),
                                           (-35.05999755859375, -35.55999755859375, -36.04999923706055,
                                            -36.540000915527344, -37.02000045776367, -37.459999084472656,
                                            -37.91999816894531, -38.37999725341797, -38.82999801635742,
                                            -39.27000045776367, -39.709999084472656, -40.13999938964844,
                                            -40.56999969482422, -40.959999084472656, -41.37999725341797,
                                            -41.779998779296875, -42.18000030517578, -42.56999969482422,
                                            -42.959999084472656, -43.34000015258789, -43.71999740600586,
                                            -44.09000015258789, -44.459999084472656, -44.81999969482422,
                                            -45.16999816894531, -45.52000045776367, -45.869998931884766,
                                            -46.209999084472656, -46.53999710083008, -46.84000015258789,
                                            -47.16999816894531, -47.48999786376953, -47.79999923706055,
                                            -48.11000061035156, -48.41999816894531, -48.71999740600586,
                                            -49.02000045776367, -49.29999923706055, -49.59000015258789,
                                            -49.87999725341797, -50.15999984741211, -50.439998626708984,
                                            -50.709999084472656, -50.97999954223633, -51.25, -51.5, -51.7599983215332,
                                            -52.02000045776367, -52.27000045776367, -52.52000045776367,
                                            -52.7599983215332, -53.0099983215332, -53.23999786376953,
                                            -53.47999954223633, -53.709999084472656, -53.939998626708984,
                                            -54.16999816894531, -54.38999938964844, -54.61000061035156,
                                            -54.82999801635742, -55.04999923706055, -55.23999786376953,
                                            -55.44999694824219, -55.64999771118164, -55.86000061035156,
                                            -56.05999755859375, -56.2599983215332, -56.44999694824219,
                                            -56.64999771118164, -56.84000015258789, -57.029998779296875,
                                            -57.21999740600586, -57.39999771118164, -57.57999801635742,
                                            -57.7599983215332, -57.939998626708984, -58.119998931884766,
                                            -58.28999710083008, -58.459999084472656, -58.62999725341797,
                                            -58.79999923706055, -58.96999740600586, -59.12999725341797,
                                            -59.28999710083008, -59.44999694824219, -59.6099967956543,
                                            -59.77000045776367, -59.91999816894531, -60.06999969482422,
                                            -60.21999740600586, -60.369998931884766, -60.52000045776367,
                                            -60.66999816894531, -60.80999755859375, -60.94999694824219,
                                            -61.09000015258789, -61.22999954223633, -61.37999725341797,
                                            -61.52000045776367, -61.64999771118164, -61.78999710083008,
                                            -61.91999816894531, -62.04999923706055, -62.18000030517578,
                                            -62.30999755859375, -62.43000030517578, -62.55999755859375,
                                            -62.68000030517578, -62.80999755859375, -62.93000030517578,
                                            -63.04999923706055, -63.16999816894531, -63.279998779296875,
                                            -63.39999771118164, -63.5099983215332, -63.62999725341797,
                                            -63.73999786376953, -63.849998474121094, -63.959999084472656,
                                            -64.08999633789062, -64.19999694824219, -64.30999755859375,
                                            -64.41999816894531, -64.5199966430664, -64.62999725341797,
                                            -64.72999572753906, -64.83000183105469, -64.93000030517578,
                                            -65.02999877929688, -65.12999725341797, -65.22999572753906,
                                            -65.33000183105469, -65.43000030517578, -65.52999877929688,
                                            -65.6199951171875, -65.72000122070312, -65.80999755859375,
                                            -65.9000015258789, -65.98999786376953, -66.08999633789062,
                                            -66.16999816894531, -66.26000213623047, -66.3499984741211,
                                            -66.43999481201172, -66.52999877929688, -66.61000061035156,
                                            -66.72000122070312, -66.79999542236328, -66.87999725341797,
                                            -66.97000122070312, -67.04999542236328, -67.12999725341797,
                                            -67.20999908447266, -67.29000091552734, -67.3699951171875,
                                            -67.44999694824219, -67.5199966430664, -67.5999984741211,
                                            -67.68000030517578, -67.75, -67.83000183105469, -67.9000015258789,
                                            -67.97999572753906, -68.04999542236328, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                            999.0, 999.0))),
                 synth_soundspeed=(1488.599976, 1488.599976),
                 synth_traveltime=(((0.3374375104904175, 0.3357412815093994, 0.33404624462127686, 0.33235231041908264,
                                    0.3306598961353302, 0.3289688229560852, 0.32727906107902527, 0.32559049129486084,
                                    0.32390353083610535, 0.32221800088882446, 0.3205338716506958, 0.31885120272636414,
                                    0.3171696066856384, 0.31548982858657837, 0.31381168961524963, 0.31213507056236267,
                                    0.31045982241630554, 0.3087862730026245, 0.30711445212364197, 0.3054443299770355,
                                    0.3020079731941223, 0.29984620213508606, 0.2967924475669861, 0.29647696018218994,
                                    0.2950640916824341, 0.2927025556564331, 0.29232558608055115, 0.2912289798259735,
                                    0.28977474570274353, 0.2881520092487335, 0.28717324137687683, 0.2856220006942749,
                                    0.2851574718952179, 0.28226321935653687, 0.28172051906585693, 0.2802572548389435,
                                    0.2776043117046356, 0.27718469500541687, 0.27503135800361633, 0.273084819316864,
                                    0.272175133228302, 0.27123868465423584, 0.2689912021160126, 0.2677075266838074,
                                    0.26570504903793335, 0.2634405195713043, 0.2616542875766754, 0.2603621780872345,
                                    0.25535130500793457, 0.254361093044281, 0.2529014050960541, 0.25154542922973633,
                                    0.25045329332351685, 0.248873770236969, 0.24781282246112823, 0.24646112322807312,
                                    0.24496693909168243, 0.2427952140569687, 0.24143311381340027, 0.23992636799812317,
                                    0.238366961479187, 0.2370224893093109, 0.23514406383037567, 0.23415888845920563,
                                    0.2331659197807312, 0.23129628598690033, 0.22966407239437103, 0.22826018929481506,
                                    0.22680066525936127, 0.22541585564613342, 0.22421228885650635, 0.222798153758049,
                                    0.22108058631420135, 0.21954548358917236, 0.2181616723537445, 0.21673280000686646,
                                    0.21525824069976807, 0.21379734575748444, 0.2122238576412201, 0.2109091877937317,
                                    0.20954707264900208, 0.20804230868816376, 0.20636680722236633, 0.20465649664402008,
                                    0.20333729684352875, 0.2020127922296524, 0.2006591409444809, 0.19947606325149536,
                                    0.19785869121551514, 0.19623053073883057, 0.19484421610832214, 0.19340433180332184,
                                    0.1919742226600647, 0.19056595861911774, 0.1893770694732666, 0.18817508220672607,
                                    0.18674783408641815, 0.18526357412338257, 0.18383032083511353, 0.18259765207767487,
                                    0.18136237561702728, 0.18006901443004608, 0.17867760360240936, 0.1773137003183365,
                                    0.17586833238601685, 0.1746516078710556, 0.1735181212425232, 0.17230795323848724,
                                    0.17102600634098053, 0.16971181333065033, 0.1685095876455307, 0.1668970137834549,
                                    0.1658957600593567, 0.16480514407157898, 0.1637103408575058, 0.16239388287067413,
                                    0.16132354736328125, 0.16022831201553345, 0.15894939005374908, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0),
                                   (0.34952378273010254, 0.34781742095947266, 0.3461121618747711, 0.34440723061561584,
                                    0.3427044153213501, 0.34100282192230225, 0.3393023908138275, 0.33760324120521545,
                                    0.33590468764305115, 0.3342081308364868, 0.33251285552978516, 0.33081892132759094,
                                    0.32912638783454895, 0.3274345099925995, 0.32574474811553955, 0.32405632734298706,
                                    0.32236939668655396, 0.3206828832626343, 0.3189988434314728, 0.31731635332107544,
                                    0.31563541293144226, 0.31395599246025085, 0.3122776746749878, 0.31060150265693665,
                                    0.30892685055732727, 0.30725398659706116, 0.30558183789253235, 0.3039122521877289,
                                    0.30224448442459106, 0.2997472584247589, 0.29883816838264465, 0.29686078429222107,
                                    0.2946734130382538, 0.2934819161891937, 0.2915585935115814, 0.2895197570323944,
                                    0.2892286479473114, 0.28747454285621643, 0.2863292396068573, 0.28454750776290894,
                                    0.2834285795688629, 0.282021164894104, 0.27990415692329407, 0.2779349982738495,
                                    0.2756999135017395, 0.27437663078308105, 0.273024320602417, 0.2707389295101166,
                                    0.26886099576950073, 0.266340047121048, 0.2654823064804077, 0.2641463577747345,
                                    0.2625275254249573, 0.2614007592201233, 0.2598012685775757, 0.2576005756855011,
                                    0.2560780346393585, 0.2547985315322876, 0.25287899374961853, 0.2515038847923279,
                                    0.2501918375492096, 0.2486228197813034, 0.2469712793827057, 0.2456117421388626,
                                    0.2432183474302292, 0.24167174100875854, 0.24029640853405, 0.23918896913528442,
                                    0.23772327601909637, 0.23623858392238617, 0.23429714143276215, 0.23265418410301208,
                                    0.2311680018901825, 0.22961941361427307, 0.2281603217124939, 0.22642047703266144,
                                    0.22506748139858246, 0.22351175546646118, 0.2215602993965149, 0.2202710062265396,
                                    0.2191750705242157, 0.21746636927127838, 0.21579909324645996, 0.21451057493686676,
                                    0.21293528378009796, 0.2114066779613495, 0.2099604606628418, 0.20854498445987701,
                                    0.2068481147289276, 0.2054097056388855, 0.2041482776403427, 0.20292741060256958,
                                    0.20135074853897095, 0.1997912973165512, 0.19832558929920197, 0.19690042734146118,
                                    0.1953708976507187, 0.1940000355243683, 0.1925196498632431, 0.19114597141742706,
                                    0.1897365003824234, 0.18842469155788422, 0.18712027370929718, 0.18567995727062225,
                                    0.18443596363067627, 0.18313166499137878, 0.18175660073757172, 0.1804666966199875,
                                    0.17888054251670837, 0.17765112221240997, 0.1764354407787323, 0.1750531643629074,
                                    0.1737435907125473, 0.17244327068328857, 0.17131376266479492, 0.17014050483703613,
                                    0.16892482340335846, 0.1677754521369934, 0.16658402979373932, 0.16517414152622223,
                                    0.16395454108715057, 0.16280822455883026, 0.16165189445018768, 0.16037945449352264,
                                    0.15928420424461365, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0)),
                                  ((0.1575709879398346, 0.15638211369514465, 0.15529374778270721, 0.15418589115142822,
                                    0.15309716761112213, 0.15202093124389648, 0.15103377401828766, 0.15010498464107513,
                                    0.14910505712032318, 0.14789500832557678, 0.14690709114074707, 0.14592191576957703,
                                    0.14490360021591187, 0.14390155673027039, 0.1429774910211563, 0.14209362864494324,
                                    0.14124912023544312, 0.14040565490722656, 0.13947519659996033, 0.1385476291179657,
                                    0.137763112783432, 0.13695164024829865, 0.1360786259174347, 0.13524538278579712,
                                    0.13447393476963043, 0.1338355392217636, 0.13311000168323517, 0.1324142962694168,
                                    0.13184699416160583, 0.13116806745529175, 0.13039086759090424, 0.12989726662635803,
                                    0.12933440506458282, 0.12869511544704437, 0.1278975009918213, 0.12756505608558655,
                                    0.12713466584682465, 0.12667976319789886, 0.12615695595741272, 0.1258656531572342,
                                    0.12567085027694702, 0.12508341670036316, 0.12458021938800812, 0.12434318661689758,
                                    0.12413046509027481, 0.12391781061887741, 0.12371096014976501, 0.12351953238248825,
                                    0.12337861210107803, 0.12303746491670609, 0.12298218160867691, 0.1228841245174408,
                                    0.1228717714548111, 0.12282541394233704, 0.12281928211450577, 0.12284699082374573,
                                    0.12284641712903976, 0.12295518070459366, 0.12306376546621323, 0.12316183745861053,
                                    0.12333490699529648, 0.12351629137992859, 0.12392402440309525, 0.12389696389436722,
                                    0.12392258644104004, 0.12437284737825394, 0.12451865524053574, 0.12557365000247955,
                                    0.12587347626686096, 0.12610408663749695, 0.12628589570522308, 0.12672537565231323,
                                    0.12721019983291626, 0.1276213824748993, 0.12844190001487732, 0.1290208101272583,
                                    0.12952157855033875, 0.13002599775791168, 0.13065874576568604, 0.13121750950813293,
                                    0.1318977177143097, 0.13257838785648346, 0.13332320749759674, 0.13372011482715607,
                                    0.1347912698984146, 0.13551272451877594, 0.13639000058174133, 0.13716088235378265,
                                    0.1380022019147873, 0.13874414563179016, 0.13950341939926147, 0.1404743790626526,
                                    0.14139826595783234, 0.14238989353179932, 0.14324049651622772, 0.14417371153831482,
                                    0.1452016532421112, 0.1461936980485916, 0.14724120497703552, 0.14816544950008392,
                                    0.14899800717830658, 0.150119811296463, 0.1511872410774231, 0.15220977365970612,
                                    0.15327465534210205, 0.15442359447479248, 0.15570339560508728, 0.15672776103019714,
                                    0.15780594944953918, 0.15882791578769684, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0),
                                   (0.15799911320209503, 0.15679603815078735, 0.1557161509990692, 0.1546703726053238,
                                    0.15351930260658264, 0.15235942602157593, 0.15126603841781616, 0.15028423070907593,
                                    0.1492982655763626, 0.1482526808977127, 0.14716477692127228, 0.14621779322624207,
                                    0.14522601664066315, 0.14412707090377808, 0.14310741424560547, 0.1422668844461441,
                                    0.1414078027009964, 0.1406654417514801, 0.13975079357624054, 0.13878987729549408,
                                    0.1380726844072342, 0.13731098175048828, 0.13646572828292847, 0.13564659655094147,
                                    0.13486522436141968, 0.13407151401042938, 0.13334862887859344, 0.13258789479732513,
                                    0.13172221183776855, 0.1312512755393982, 0.13062341511249542, 0.12999358773231506,
                                    0.1293434202671051, 0.1290545016527176, 0.1279492974281311, 0.12765541672706604,
                                    0.12718398869037628, 0.12663431465625763, 0.12632539868354797, 0.12608295679092407,
                                    0.12574544548988342, 0.1252502202987671, 0.12495604157447815, 0.12453334778547287,
                                    0.12437017261981964, 0.12435173243284225, 0.12407220155000687, 0.1235186755657196,
                                    0.12333573400974274, 0.12318101525306702, 0.12300212681293488, 0.12292727828025818,
                                    0.12283359467983246, 0.12278442829847336, 0.12277297675609589, 0.12277819216251373,
                                    0.12302151322364807, 0.12301351875066757, 0.12299361079931259, 0.12304827570915222,
                                    0.12309367209672928, 0.12336920946836472, 0.12347535043954849, 0.12371520698070526,
                                    0.12391519546508789, 0.1241154670715332, 0.12457716464996338, 0.12479940056800842,
                                    0.12521040439605713, 0.125541552901268, 0.12611936032772064, 0.12653474509716034,
                                    0.1269112527370453, 0.12749260663986206, 0.1279270499944687, 0.1284387856721878,
                                    0.12905855476856232, 0.12937091290950775, 0.130141943693161, 0.13071408867835999,
                                    0.13135425746440887, 0.13166998326778412, 0.1327970027923584, 0.1334107667207718,
                                    0.13425606489181519, 0.1350470632314682, 0.1356404423713684, 0.13637828826904297,
                                    0.13732405006885529, 0.13792647421360016, 0.13887350261211395, 0.1397039294242859,
                                    0.14064916968345642, 0.14149218797683716, 0.14235827326774597, 0.1432345062494278,
                                    0.14422348141670227, 0.14519357681274414, 0.14616432785987854, 0.14716151356697083,
                                    0.14805378019809723, 0.14910705387592316, 0.15014632046222687, 0.15115243196487427,
                                    0.15220710635185242, 0.1532486081123352, 0.15438693761825562, 0.15577088296413422,
                                    0.15671782195568085, 0.15761984884738922, 0.15865226089954376, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0)),
                                  ((0.1598992943763733, 0.16106390953063965, 0.16218315064907074, 0.16336898505687714,
                                    0.16450975835323334, 0.16554787755012512, 0.16673223674297333, 0.16802586615085602,
                                    0.16914153099060059, 0.17030972242355347, 0.17162412405014038, 0.1729508489370346,
                                    0.17418153584003448, 0.1754836142063141, 0.17694345116615295, 0.17809198796749115,
                                    0.17917247116565704, 0.18048562109470367, 0.1817476600408554, 0.18293623626232147,
                                    0.18423449993133545, 0.18559850752353668, 0.18693330883979797, 0.18802407383918762,
                                    0.18925586342811584, 0.1908300668001175, 0.1922687590122223, 0.193356454372406,
                                    0.1945851445198059, 0.196506068110466, 0.19746382534503937, 0.19832709431648254,
                                    0.1993720382452011, 0.2010042369365692, 0.20257529616355896, 0.2040964812040329,
                                    0.205393448472023, 0.20676451921463013, 0.20794112980365753, 0.2089327722787857,
                                    0.21023736894130707, 0.21177679300308228, 0.21306435763835907, 0.21439091861248016,
                                    0.21591752767562866, 0.21724063158035278, 0.21829473972320557, 0.21930323541164398,
                                    0.2207644134759903, 0.2220487743616104, 0.22347716987133026, 0.2252076268196106,
                                    0.22634005546569824, 0.2273649275302887, 0.22926561534404755, 0.23047931492328644,
                                    0.23142921924591064, 0.23233042657375336, 0.23409557342529297, 0.23543913662433624,
                                    0.2365216761827469, 0.23774871230125427, 0.23916755616664886, 0.24044759571552277,
                                    0.241766095161438, 0.2431362271308899, 0.24446439743041992, 0.2458246648311615,
                                    0.2472359836101532, 0.24860940873622894, 0.25008437037467957, 0.25157350301742554,
                                    0.25307080149650574, 0.2539283335208893, 0.25533220171928406, 0.25586390495300293,
                                    0.2571607828140259, 0.2577551603317261, 0.25821760296821594, 0.25939446687698364,
                                    0.26023754477500916, 0.26045262813568115, 0.26199159026145935, 0.2629584074020386,
                                    0.26400429010391235, 0.26487383246421814, 0.26567894220352173, 0.2669311463832855,
                                    0.2679421901702881, 0.2693841755390167, 0.2700219750404358, 0.27070826292037964,
                                    0.27169305086135864, 0.27310314774513245, 0.27501243352890015, 0.27526170015335083,
                                    0.2759508788585663, 0.2773776352405548, 0.27816954255104065, 0.278579980134964,
                                    0.28057557344436646, 0.2798923850059509, 0.28191250562667847, 0.28271177411079407,
                                    0.2831477224826813, 0.28351518511772156, 0.2850959897041321, 0.28600171208381653,
                                    0.2868059575557709, 0.28817614912986755, 0.2893703877925873, 0.28910261392593384,
                                    0.2903715968132019, 0.29132118821144104, 0.2923472225666046, 0.29328593611717224,
                                    0.2937248945236206, 0.2941773235797882, 0.29474011063575745, 0.29634174704551697,
                                    0.29782551527023315, 0.2984680235385895, 0.2992298901081085, 0.2995428442955017,
                                    0.30072692036628723, 0.301645427942276, 0.3029421269893646, 0.3034036457538605,
                                    0.30444562435150146, 0.3060629367828369, 0.30626845359802246, 0.3065716326236725,
                                    0.307822048664093, 0.30859825015068054, 0.30936720967292786, 0.3101290166378021,
                                    0.3114269971847534, 0.31203868985176086, 0.3121291995048523, 0.31230106949806213,
                                    0.3135856091976166, 0.31425026059150696, 0.3151942193508148, 0.3155527412891388,
                                    0.316191703081131, 0.3176724314689636, 0.3179526925086975, 0.31766587495803833,
                                    0.3181474804878235, 0.3191652297973633, 0.32009357213974, 0.3206186592578888,
                                    0.32161831855773926, 0.3213222324848175, 0.3223084509372711, 0.32313886284828186,
                                    0.32373639941215515, 0.3234797716140747, 0.3248836398124695, 0.32545000314712524,
                                    0.32647767663002014, 0.32574811577796936, 0.3275132477283478, 0.32767313718795776,
                                    0.3282703459262848, 0.3288625180721283, 0.3294498026371002, 0.330032080411911,
                                    0.33060967922210693, 0.3319944739341736, 0.3316548466682434, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0),
                                   (0.15985563397407532, 0.16099177300930023, 0.16212530434131622, 0.1632644385099411,
                                    0.16432644426822662, 0.16538330912590027, 0.16649805009365082, 0.16757343709468842,
                                    0.16860327124595642, 0.1700936257839203, 0.17155462503433228, 0.17283445596694946,
                                    0.1741098314523697, 0.17515328526496887, 0.1764032542705536, 0.177615687251091,
                                    0.17869895696640015, 0.17989610135555267, 0.18127800524234772, 0.1825493723154068,
                                    0.18375994265079498, 0.1850748211145401, 0.18640872836112976, 0.1877794712781906,
                                    0.18893200159072876, 0.19001273810863495, 0.19133976101875305, 0.19267933070659637,
                                    0.19395819306373596, 0.1952030211687088, 0.1962091028690338, 0.19714568555355072,
                                    0.19869546592235565, 0.2001655101776123, 0.20136770606040955, 0.2028643637895584,
                                    0.20432716608047485, 0.2054082155227661, 0.20678699016571045, 0.20805156230926514,
                                    0.20920617878437042, 0.21042117476463318, 0.21183781325817108, 0.21327127516269684,
                                    0.2145986407995224, 0.21576134860515594, 0.21699541807174683, 0.21872739493846893,
                                    0.21964803338050842, 0.2207508534193039, 0.22227180004119873, 0.22367459535598755,
                                    0.22488221526145935, 0.2260754406452179, 0.22693227231502533, 0.22774241864681244,
                                    0.22965861856937408, 0.23072080314159393, 0.23218564689159393, 0.23339052498340607,
                                    0.2346404641866684, 0.2361007034778595, 0.23707836866378784, 0.23824919760227203,
                                    0.23963168263435364, 0.24079719185829163, 0.2416728287935257, 0.24224455654621124,
                                    0.24431519210338593, 0.24544037878513336, 0.24663107097148895, 0.2478792369365692,
                                    0.24910899996757507, 0.2503337860107422, 0.2516320049762726, 0.25364410877227783,
                                    0.2541426718235016, 0.25511306524276733, 0.25597530603408813, 0.2570735812187195,
                                    0.2581655979156494, 0.25917282700538635, 0.2609688639640808, 0.26180750131607056,
                                    0.26266011595726013, 0.26457178592681885, 0.26564890146255493, 0.266274631023407,
                                    0.2681341767311096, 0.2690257430076599, 0.2697758376598358, 0.2710110545158386,
                                    0.271642804145813, 0.27229219675064087, 0.27356529235839844, 0.2744649648666382,
                                    0.27495455741882324, 0.2763124108314514, 0.2771412432193756, 0.27815020084381104,
                                    0.2793969213962555, 0.280124306678772, 0.2807937562465668, 0.2819910943508148,
                                    0.2829090356826782, 0.2839950621128082, 0.28463172912597656, 0.28562670946121216,
                                    0.28621187806129456, 0.28741851449012756, 0.2874222695827484, 0.2883673310279846,
                                    0.29048776626586914, 0.29098138213157654, 0.2921293079853058, 0.29305392503738403,
                                    0.29347047209739685, 0.2936982810497284, 0.29475656151771545, 0.2955471873283386,
                                    0.2959984540939331, 0.2970324456691742, 0.29757124185562134, 0.29829859733581543,
                                    0.2987319231033325, 0.2997446060180664, 0.3003785014152527, 0.3015892505645752,
                                    0.30149421095848083, 0.3031129240989685, 0.30310389399528503, 0.3046611249446869,
                                    0.3050897717475891, 0.30610495805740356, 0.30641335248947144, 0.3072252571582794,
                                    0.30801060795783997, 0.3086412847042084, 0.30968332290649414, 0.30971646308898926,
                                    0.3111615478992462, 0.3120798170566559, 0.3123302459716797, 0.3133338689804077,
                                    0.31464725732803345, 0.31426629424095154, 0.3157936632633209, 0.3159604072570801,
                                    0.3172932267189026, 0.3172021210193634, 0.31851956248283386, 0.3189288377761841,
                                    0.3189515173435211, 0.3199196755886078, 0.32106316089630127, 0.3208130896091461,
                                    0.3216664493083954, 0.32193198800086975, 0.32254016399383545, 0.32350730895996094,
                                    0.32439401745796204, 0.3244454264640808, 0.32538262009620667, 0.3260505199432373,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0, 999.0,
                                    999.0, 999.0, 999.0, 999.0, 999.0, 999.0))),
                 synth_tiltangle=((-0.6100000143051147, -1.2300000190734863), (0.2199999988079071, 0.1899999976158142),
                                  (0.8399999737739563, 1.4399999380111694)),
                 synth_delay=(0.0000000379513949155807, 0.0000000379513949155807),
                 synth_ntx=(3, 3),
                 synth_heave=(0.009999999776, 0.009999999776, -0.009999999776, -0.009999999776),
                 synth_roll=(0.5899999738, 0.3799999952, -4.230000019, -4.289999962),
                 synth_pitch=(-0.4899999797, -0.5, -0.4099999964, -0.3999999762),
                 synth_yaw=(307.8299866, 307.8599854, 308.5799866, 308.5899963),
                 synth_alongtrackvel=(2.106570721, 2.106986046, 2.172390699, 2.172413349),
                 synth_altitude=(-23.99238128, -23.99229421, -23.97449502, -23.97421651),
                 synth_latitude=(47.78895106, 47.78895112, 47.78895667, 47.78895672),
                 synth_longitude=(-122.4772233, -122.4772235, -122.4772346, -122.4772348),
                 synth_xyztime=1495563079, synth_waterline=-0.640,
                 synth_tx_mountroll=0, synth_tx_mountpitch=0, synth_tx_mountyaw=0,
                 synth_rx_mountroll=0, synth_rx_mountpitch=0, synth_rx_mountyaw=0,
                 synth_tx_x=0.00, synth_tx_y=0.00, synth_tx_z=0.00,
                 synth_tx_x_0=0.00, synth_tx_x_1=0.00, synth_tx_x_2=0.00, synth_tx_y_0=-0.0554, synth_tx_y_1=0.0131,
                 synth_tx_y_2=0.0554, synth_tx_z_0=-0.012, synth_tx_z_1=-0.006, synth_tx_z_2=-0.012,
                 synth_rx_x=-0.100, synth_rx_y=-0.304, synth_rx_z=-0.016,
                 synth_rx_x_0=0.011, synth_rx_x_1=0.011, synth_rx_x_2=0.011, synth_rx_y_0=0.00, synth_rx_y_1=0.00,
                 synth_rx_y_2=0.00, synth_rx_z_0=-0.006, synth_rx_z_1=-0.006, synth_rx_z_2=-0.006,
                 serialnum='40111', secondary_serialnum='0',
                 profile=None,
                 secs=('40111_0_265000', '40111_1_285000', '40111_2_270000')):

        if profile is None:
            profile = {'profile_1495599960': '[[0.0, 1489.2000732421875], [0.32, 1489.2000732421875], '
                                             '[0.5, 1488.7000732421875], [0.55, 1488.300048828125], '
                                             '[0.61, 1487.9000244140625], [0.65, 1488.2000732421875], '
                                             '[0.67, 1488.0], [0.79, 1487.9000244140625], '
                                             '[0.88, 1487.9000244140625], [1.01, 1488.2000732421875], '
                                             '[1.04, 1488.0999755859375], [1.62, 1488.0999755859375], '
                                             '[2.0300000000000002, 1488.300048828125], [2.43, 1488.9000244140625], '
                                             '[2.84, 1488.5], [3.25, 1487.7000732421875], '
                                             '[3.67, 1487.2000732421875], [4.45, 1486.800048828125], '
                                             '[4.8500000000000005, 1486.800048828125], [5.26, 1486.5999755859375], '
                                             '[6.09, 1485.7000732421875], [6.9, 1485.0999755859375], '
                                             '[7.71, 1484.800048828125], [8.51, 1484.0], [8.91, 1483.800048828125], '
                                             '[10.13, 1483.7000732421875], [11.8, 1483.0999755859375], '
                                             '[12.620000000000001, 1482.9000244140625], '
                                             '[16.79, 1482.9000244140625], [20.18, 1481.9000244140625], '
                                             '[23.93, 1481.300048828125], [34.79, 1480.800048828125], '
                                             '[51.15, 1480.800048828125], [56.13, 1481.0], [60.67, 1481.5], '
                                             '[74.2, 1481.9000244140625], [12000.0, 1675.800048828125]]'}
        self.client = dask_find_or_start_client()
        self.synth_ra_time = synth_ra_time
        self.synth_att_time = synth_att_time
        self.synth_nav_time = synth_nav_time
        self.synth_beampointingangle = synth_beampointingangle
        self.synth_soundspeed = synth_soundspeed
        self.synth_tiltangle = synth_tiltangle
        self.synth_traveltime = synth_traveltime
        self.synth_ntx = synth_ntx
        self.synth_delay = synth_delay
        self.synth_heave = synth_heave
        self.synth_roll = synth_roll
        self.synth_pitch = synth_pitch
        self.synth_yaw = synth_yaw
        self.synth_alongtrackvel = synth_alongtrackvel
        self.synth_altitude = synth_altitude
        self.synth_latitude = synth_latitude
        self.synth_longitude = synth_longitude

        self.synth_rx_mountyaw = synth_rx_mountyaw
        self.synth_rx_mountyaw = synth_rx_mountyaw

        self.secs = secs
        self.serialnum = serialnum
        self.secondary_serialnum = secondary_serialnum
        self.profile = profile

        self.xyzrph = {'tx_r': {str(synth_xyztime): synth_tx_mountroll},
                       'tx_p': {str(synth_xyztime): synth_tx_mountpitch},
                       'tx_h': {str(synth_xyztime): synth_tx_mountyaw},
                       'rx_r': {str(synth_xyztime): synth_rx_mountroll},
                       'rx_p': {str(synth_xyztime): synth_rx_mountpitch},
                       'rx_h': {str(synth_xyztime): synth_rx_mountyaw},
                       'tx_x': {str(synth_xyztime): synth_tx_x},
                       'tx_y': {str(synth_xyztime): synth_tx_y},
                       'tx_z': {str(synth_xyztime): synth_tx_z},
                       'tx_x_0': {str(synth_xyztime): synth_tx_x_0},
                       'tx_x_1': {str(synth_xyztime): synth_tx_x_1},
                       'tx_x_2': {str(synth_xyztime): synth_tx_x_2},
                       'tx_y_0': {str(synth_xyztime): synth_tx_y_0},
                       'tx_y_1': {str(synth_xyztime): synth_tx_y_1},
                       'tx_y_2': {str(synth_xyztime): synth_tx_y_2},
                       'tx_z_0': {str(synth_xyztime): synth_tx_z_0},
                       'tx_z_1': {str(synth_xyztime): synth_tx_z_1},
                       'tx_z_2': {str(synth_xyztime): synth_tx_z_2},
                       'rx_x': {str(synth_xyztime): synth_rx_x},
                       'rx_y': {str(synth_xyztime): synth_rx_y},
                       'rx_z': {str(synth_xyztime): synth_rx_z},
                       'rx_x_0': {str(synth_xyztime): synth_rx_x_0},
                       'rx_x_1': {str(synth_xyztime): synth_rx_x_1},
                       'rx_x_2': {str(synth_xyztime): synth_rx_x_2},
                       'rx_y_0': {str(synth_xyztime): synth_rx_y_0},
                       'rx_y_1': {str(synth_xyztime): synth_rx_y_1},
                       'rx_y_2': {str(synth_xyztime): synth_rx_y_2},
                       'rx_z_0': {str(synth_xyztime): synth_rx_z_0},
                       'rx_z_1': {str(synth_xyztime): synth_rx_z_1},
                       'rx_z_2': {str(synth_xyztime): synth_rx_z_2},
                       'waterline': {str(synth_xyztime): synth_waterline}
                       }

        self.raw_rangeangle = self.construct_rangeangle()
        self.raw_att = self.construct_rawattitude()
        self.raw_nav = self.construct_rawnavigation()

    def construct_rangeangle(self):
        tme_vals = list(self.synth_ra_time)
        sec_vals = self.secs

        if len(self.synth_beampointingangle) != len(self.secs) or \
                len(self.synth_beampointingangle[0]) != len(self.synth_ra_time):
            raise ValueError('Found odd number of beams in synth_beampointingangle, should be a multiplier of provided '
                             'ra time')
        num_beams = int(len(self.synth_beampointingangle[0][0]))
        bm_vals = [i for i in range(num_beams)]

        tme_coord = xr.DataArray(np.array(tme_vals), dims=['time'], coords=np.array([tme_vals]))
        beam_coord = xr.DataArray(np.array(bm_vals), dims=['beam'], coords=np.array([bm_vals]))

        dataset = []
        for cnt, sec in enumerate(sec_vals):
            delay = xr.DataArray(np.array(self.synth_delay), dims=['time'], coords={'time': tme_coord})
            ntx = xr.DataArray(np.array(self.synth_ntx), dims=['time'], coords={'time': tme_coord})
            soundspeed = xr.DataArray(np.array(self.synth_soundspeed), dims=['time'], coords={'time': tme_coord})

            tiltangle = xr.DataArray(np.array(self.synth_tiltangle[cnt]), dims=['time'], coords={'time': tme_coord})

            twtt_data = np.array(list(self.synth_traveltime[cnt]))
            if twtt_data.ndim == 1:
                twtt_data = np.expand_dims(twtt_data, axis=1)
            twoway_travel_time = xr.DataArray(twtt_data, dims=['time', 'beam'],
                                              coords={'time': tme_coord, 'beam': bm_vals})

            bpa_data = np.array(list(self.synth_beampointingangle[cnt]))
            if bpa_data.ndim == 1:
                bpa_data = np.expand_dims(bpa_data, axis=1)
            beam_pointing_angle = xr.DataArray(bpa_data, dims=['time', 'beam'],
                                               coords={'time': tme_coord, 'beam': bm_vals})

            dataset.append(xr.Dataset({'delay': (['time'], delay),
                                       'ntx': (['time'], ntx),
                                       'tiltangle': (['time'], tiltangle),
                                       'soundspeed': (['time'], soundspeed),
                                       'traveltime': (['time', 'beam'], twoway_travel_time),
                                       'beampointingangle': (['time', 'beam'], beam_pointing_angle)},
                                      coords={'time': tme_coord, 'beam': beam_coord},
                                      attrs={list(self.profile.keys())[0]: self.profile[list(self.profile.keys())[0]],
                                             'system_serial_number': [self.serialnum],
                                             'secondary_system_serial_number': [self.secondary_serialnum],
                                             'sector_identifier': sec}).chunk())
        return dataset

    def construct_rawattitude(self):
        tme_vals = list(self.synth_att_time)
        tme_coord = xr.DataArray(np.array(tme_vals), dims=['time'], coords=np.array([tme_vals]))

        heading = xr.DataArray(np.array(self.synth_yaw), dims=['time'], coords={'time': tme_coord})
        heave = xr.DataArray(np.array(self.synth_heave), dims=['time'], coords={'time': tme_coord})
        pitch = xr.DataArray(np.array(self.synth_pitch), dims=['time'], coords={'time': tme_coord})
        roll = xr.DataArray(np.array(self.synth_roll), dims=['time'], coords={'time': tme_coord})

        return xr.Dataset({'heading': (['time'], heading), 'heave': (['time'], heave), 'pitch': (['time'], pitch),
                           'roll': (['time'], roll)}, coords={'time': tme_coord}).chunk()

    def construct_rawnavigation(self):
        tme_vals = list(self.synth_nav_time)
        tme_coord = xr.DataArray(np.array(tme_vals), dims=['time'], coords=np.array([tme_vals]))

        alongtrackvel = xr.DataArray(np.array(self.synth_alongtrackvel), dims=['time'], coords={'time': tme_coord})
        altitude = xr.DataArray(np.array(self.synth_altitude), dims=['time'], coords={'time': tme_coord})
        latitude = xr.DataArray(np.array(self.synth_latitude), dims=['time'], coords={'time': tme_coord})
        longitude = xr.DataArray(np.array(self.synth_longitude), dims=['time'], coords={'time': tme_coord})

        return xr.Dataset({'alongtrackvel': (['time'], alongtrackvel), 'altitude': (['time'], altitude),
                           'latitude': (['time'], latitude), 'longitude': (['time'], longitude)},
                          coords={'time': tme_coord}).chunk()


def xyz88_from_allfile(filname):
    pfil = par3.AllRead(filname)
    pfil.mapfile()
    num88 = len(pfil.map.packdir['88'])

    dpths = np.zeros((num88, 400))
    xs = np.zeros((num88, 400))
    ys = np.zeros((num88, 400))
    tms = np.zeros(num88)
    for i in range(num88):
        try:
            rec88 = pfil.getrecord(88, i)
            rec78 = pfil.getrecord(78, i)
            dpths[i, :] = rec88.data['Depth']
            ys[i, :] = rec88.data['AcrossTrack']
            xs[i, :] = rec88.data['AlongTrack']
            tms[i] = rec88.time + rec78.tx_data.Delay[0]  # match par sequential_read, ping time = timestamp + delay
        except IndexError:
            break

    timesorted = np.argsort(tms)
    tms = tms[timesorted]
    xs = xs[timesorted]
    ys = ys[timesorted]
    dpths = dpths[timesorted]
    return xs, ys, dpths, tms


def klusterxyz_from_allfile(filname, visualizations=False):
    mbes_read = xarray_conversion.BatchRead(filname)
    fq = fqpr_generation.Fqpr(mbes_read)
    fq.read_from_source()
    fq.get_orientation_vectors()
    fq.build_beam_pointing_vector()
    fq.sv_correct()

    fqv = None
    if visualizations:
        fqv = FqprVisualizations(fq)
        fqv.visualize_beam_pointing_vectors()
        fqv.visualize_orientation_vector(list(fq.tx_vecs.keys())[0])

    u_tms = fq.return_unique_times_across_sectors()
    dats, ids = fq.reform_vars_across_sectors_at_time(['alongtrack_offset', 'acrosstrack_offset', 'depth_offset'],
                                                      u_tms)

    return fq, fqv, dats[0], dats[1], dats[2], u_tms


def validation_against_xyz88(filname, analysis_mode='even', numplots=10, visualizations=False):
    print('Reading from xyz88/.all file with par Allread...')
    kongs_x, kongs_y, kongs_z, kongs_tm = xyz88_from_allfile(filname)
    print('Reading and processing from raw rangeangle/.all file with Kluster...')
    fq, fqv, my_x, my_y, my_z, my_tm = klusterxyz_from_allfile(filname, visualizations=visualizations)

    print('Plotting...')
    if kongs_tm[0] == 0.0:
        # seen this with EM710 data, the xyz88 dump has zeros arrays at the start, find the first nonzero time
        #    (assuming it starts in the first 100 times)
        first_nonzero = np.where(kongs_tm[:100] != 0.0)[0][0]
        kongs_x = kongs_x[first_nonzero:]
        kongs_y = kongs_y[first_nonzero:]
        kongs_z = kongs_z[first_nonzero:]
        kongs_tm = kongs_tm[first_nonzero:]
    if kongs_x.shape != my_x.shape:
        print('Found incompatible par/Kluster data sets.  Kluster x shape {}, par x shape {}'.format(my_x.shape,
                                                                                                     kongs_x.shape))

    # pick some indexes interspersed in the array to visualize
    if analysis_mode == 'even':
        idx = np.arange(0, len(kongs_z), int(len(kongs_z) / numplots), dtype=np.int32)
    elif analysis_mode == 'random':
        idx = np.random.randint(0, len(kongs_z), size=int(len(kongs_z) / numplots))
    elif analysis_mode == 'first':
        idx = np.arange(0, numplots, dtype=np.int32)

    # plot some results
    fig = plt.figure(constrained_layout=True)
    gs = GridSpec(3, 3, figure=fig)
    myz_plt = fig.add_subplot(gs[0, :])
    kongsz_plt = fig.add_subplot(gs[1, :])
    alongdif_plt = fig.add_subplot(gs[2, 0])
    acrossdif_plt = fig.add_subplot(gs[2, 1])
    zvaldif_plt = fig.add_subplot(gs[2, 2])

    fig.suptitle('XYZ88 versus Kluster Processed Data')
    myz_plt.set_title('Kluster Vertical')
    kongsz_plt.set_title('Par Vertical')
    alongdif_plt.set_title('Kluster/Par Alongtrack Difference')
    acrossdif_plt.set_title('Kluster/Par Acrosstrack Difference')
    zvaldif_plt.set_title('Kluster/Par Vertical Difference')

    lbls = []
    for i in idx:
        lbls.append(kongs_tm[i])
        myz_plt.plot(my_z[i])
        kongsz_plt.plot(kongs_z[i])
        alongdif_plt.plot(my_x[i] - kongs_x[i])
        acrossdif_plt.plot(my_y[i] - kongs_y[i])
        zvaldif_plt.plot(my_z[i] - kongs_z[i])

    myz_plt.legend(labels=lbls, bbox_to_anchor=(1.05, 1), loc="upper left")

    # currently need to retain handle to fqpr to keep the animations going
    return fq, fqv
